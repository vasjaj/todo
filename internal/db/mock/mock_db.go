// Code generated by MockGen. DO NOT EDIT.
// Source: internal/db/db.go

// Package mock_db is a generated GoMock package.
package mock_db

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	db "github.com/vasjaj/todo/internal/db"
)

// MockDatabase is a mock of Database interface.
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase.
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance.
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// AddLabelToTask mocks base method.
func (m *MockDatabase) AddLabelToTask(labelID, taskID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLabelToTask", labelID, taskID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddLabelToTask indicates an expected call of AddLabelToTask.
func (mr *MockDatabaseMockRecorder) AddLabelToTask(labelID, taskID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLabelToTask", reflect.TypeOf((*MockDatabase)(nil).AddLabelToTask), labelID, taskID)
}

// Close mocks base method.
func (m *MockDatabase) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockDatabaseMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDatabase)(nil).Close))
}

// CompleteTask mocks base method.
func (m *MockDatabase) CompleteTask(taskID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteTask", taskID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompleteTask indicates an expected call of CompleteTask.
func (mr *MockDatabaseMockRecorder) CompleteTask(taskID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteTask", reflect.TypeOf((*MockDatabase)(nil).CompleteTask), taskID)
}

// CreateComment mocks base method.
func (m *MockDatabase) CreateComment(userID, taskID int, title, description string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", userID, taskID, title, description)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockDatabaseMockRecorder) CreateComment(userID, taskID, title, description interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockDatabase)(nil).CreateComment), userID, taskID, title, description)
}

// CreateLabel mocks base method.
func (m *MockDatabase) CreateLabel(userID int, title string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLabel", userID, title)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateLabel indicates an expected call of CreateLabel.
func (mr *MockDatabaseMockRecorder) CreateLabel(userID, title interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLabel", reflect.TypeOf((*MockDatabase)(nil).CreateLabel), userID, title)
}

// CreateTask mocks base method.
func (m *MockDatabase) CreateTask(userID int, title, description string, dueDate *time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTask", userID, title, description, dueDate)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTask indicates an expected call of CreateTask.
func (mr *MockDatabaseMockRecorder) CreateTask(userID, title, description, dueDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTask", reflect.TypeOf((*MockDatabase)(nil).CreateTask), userID, title, description, dueDate)
}

// CreateUser mocks base method.
func (m *MockDatabase) CreateUser(login, password string) (*db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", login, password)
	ret0, _ := ret[0].(*db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockDatabaseMockRecorder) CreateUser(login, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockDatabase)(nil).CreateUser), login, password)
}

// DeleteComment mocks base method.
func (m *MockDatabase) DeleteComment(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockDatabaseMockRecorder) DeleteComment(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockDatabase)(nil).DeleteComment), id)
}

// DeleteLabel mocks base method.
func (m *MockDatabase) DeleteLabel(labelID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLabel", labelID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLabel indicates an expected call of DeleteLabel.
func (mr *MockDatabaseMockRecorder) DeleteLabel(labelID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLabel", reflect.TypeOf((*MockDatabase)(nil).DeleteLabel), labelID)
}

// DeleteTask mocks base method.
func (m *MockDatabase) DeleteTask(taskID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTask", taskID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTask indicates an expected call of DeleteTask.
func (mr *MockDatabaseMockRecorder) DeleteTask(taskID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTask", reflect.TypeOf((*MockDatabase)(nil).DeleteTask), taskID)
}

// GetComment mocks base method.
func (m *MockDatabase) GetComment(id int) (*db.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComment", id)
	ret0, _ := ret[0].(*db.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComment indicates an expected call of GetComment.
func (mr *MockDatabaseMockRecorder) GetComment(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComment", reflect.TypeOf((*MockDatabase)(nil).GetComment), id)
}

// GetComments mocks base method.
func (m *MockDatabase) GetComments(taskID int) ([]db.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComments", taskID)
	ret0, _ := ret[0].([]db.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComments indicates an expected call of GetComments.
func (mr *MockDatabaseMockRecorder) GetComments(taskID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComments", reflect.TypeOf((*MockDatabase)(nil).GetComments), taskID)
}

// GetCompletedTasks mocks base method.
func (m *MockDatabase) GetCompletedTasks(userID int) ([]db.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompletedTasks", userID)
	ret0, _ := ret[0].([]db.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompletedTasks indicates an expected call of GetCompletedTasks.
func (mr *MockDatabaseMockRecorder) GetCompletedTasks(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompletedTasks", reflect.TypeOf((*MockDatabase)(nil).GetCompletedTasks), userID)
}

// GetLabel mocks base method.
func (m *MockDatabase) GetLabel(id int) (*db.Label, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLabel", id)
	ret0, _ := ret[0].(*db.Label)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLabel indicates an expected call of GetLabel.
func (mr *MockDatabaseMockRecorder) GetLabel(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLabel", reflect.TypeOf((*MockDatabase)(nil).GetLabel), id)
}

// GetLabels mocks base method.
func (m *MockDatabase) GetLabels(userID int) ([]db.Label, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLabels", userID)
	ret0, _ := ret[0].([]db.Label)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLabels indicates an expected call of GetLabels.
func (mr *MockDatabaseMockRecorder) GetLabels(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLabels", reflect.TypeOf((*MockDatabase)(nil).GetLabels), userID)
}

// GetTask mocks base method.
func (m *MockDatabase) GetTask(id int) (*db.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTask", id)
	ret0, _ := ret[0].(*db.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTask indicates an expected call of GetTask.
func (mr *MockDatabaseMockRecorder) GetTask(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTask", reflect.TypeOf((*MockDatabase)(nil).GetTask), id)
}

// GetTasks mocks base method.
func (m *MockDatabase) GetTasks(userID int) ([]db.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTasks", userID)
	ret0, _ := ret[0].([]db.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTasks indicates an expected call of GetTasks.
func (mr *MockDatabaseMockRecorder) GetTasks(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTasks", reflect.TypeOf((*MockDatabase)(nil).GetTasks), userID)
}

// GetTasksByLabel mocks base method.
func (m *MockDatabase) GetTasksByLabel(labelID int) ([]db.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTasksByLabel", labelID)
	ret0, _ := ret[0].([]db.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTasksByLabel indicates an expected call of GetTasksByLabel.
func (mr *MockDatabaseMockRecorder) GetTasksByLabel(labelID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTasksByLabel", reflect.TypeOf((*MockDatabase)(nil).GetTasksByLabel), labelID)
}

// GetUncompletedTasks mocks base method.
func (m *MockDatabase) GetUncompletedTasks(userID int) ([]db.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUncompletedTasks", userID)
	ret0, _ := ret[0].([]db.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUncompletedTasks indicates an expected call of GetUncompletedTasks.
func (mr *MockDatabaseMockRecorder) GetUncompletedTasks(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUncompletedTasks", reflect.TypeOf((*MockDatabase)(nil).GetUncompletedTasks), userID)
}

// GetUser mocks base method.
func (m *MockDatabase) GetUser(login string) (*db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", login)
	ret0, _ := ret[0].(*db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockDatabaseMockRecorder) GetUser(login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockDatabase)(nil).GetUser), login)
}

// Ping mocks base method.
func (m *MockDatabase) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockDatabaseMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockDatabase)(nil).Ping))
}

// RemoveLabelFromTask mocks base method.
func (m *MockDatabase) RemoveLabelFromTask(labelID, taskID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveLabelFromTask", labelID, taskID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveLabelFromTask indicates an expected call of RemoveLabelFromTask.
func (mr *MockDatabaseMockRecorder) RemoveLabelFromTask(labelID, taskID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveLabelFromTask", reflect.TypeOf((*MockDatabase)(nil).RemoveLabelFromTask), labelID, taskID)
}

// UncompleteTask mocks base method.
func (m *MockDatabase) UncompleteTask(taskID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UncompleteTask", taskID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UncompleteTask indicates an expected call of UncompleteTask.
func (mr *MockDatabaseMockRecorder) UncompleteTask(taskID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UncompleteTask", reflect.TypeOf((*MockDatabase)(nil).UncompleteTask), taskID)
}

// UpdateComment mocks base method.
func (m *MockDatabase) UpdateComment(id int, title, description string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateComment", id, title, description)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateComment indicates an expected call of UpdateComment.
func (mr *MockDatabaseMockRecorder) UpdateComment(id, title, description interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateComment", reflect.TypeOf((*MockDatabase)(nil).UpdateComment), id, title, description)
}

// UpdateLabel mocks base method.
func (m *MockDatabase) UpdateLabel(labelID int, title string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLabel", labelID, title)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLabel indicates an expected call of UpdateLabel.
func (mr *MockDatabaseMockRecorder) UpdateLabel(labelID, title interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLabel", reflect.TypeOf((*MockDatabase)(nil).UpdateLabel), labelID, title)
}

// UpdateTask mocks base method.
func (m *MockDatabase) UpdateTask(taskID int, title, description string, dueDate *time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTask", taskID, title, description, dueDate)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTask indicates an expected call of UpdateTask.
func (mr *MockDatabaseMockRecorder) UpdateTask(taskID, title, description, dueDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTask", reflect.TypeOf((*MockDatabase)(nil).UpdateTask), taskID, title, description, dueDate)
}
