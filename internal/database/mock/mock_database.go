// Code generated by MockGen. DO NOT EDIT.
// Source: internal/database/database.go

// Package mock_database is a generated GoMock package.
package mock_database

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	database "github.com/vasjaj/todo/internal/database"
)

// MockDatabase is a mock of Database interface.
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase.
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance.
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockDatabase) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockDatabaseMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDatabase)(nil).Close))
}

// GetBalance mocks base method.
func (m *MockDatabase) GetBalance(playerName, currency string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", playerName, currency)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockDatabaseMockRecorder) GetBalance(playerName, currency interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockDatabase)(nil).GetBalance), playerName, currency)
}

// RegisterTransaction mocks base method.
func (m *MockDatabase) RegisterTransaction(callerID, withdraw, deposit int, playerName, currency, transactionRef string) (database.Transaction, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterTransaction", callerID, withdraw, deposit, playerName, currency, transactionRef)
	ret0, _ := ret[0].(database.Transaction)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RegisterTransaction indicates an expected call of RegisterTransaction.
func (mr *MockDatabaseMockRecorder) RegisterTransaction(callerID, withdraw, deposit, playerName, currency, transactionRef interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterTransaction", reflect.TypeOf((*MockDatabase)(nil).RegisterTransaction), callerID, withdraw, deposit, playerName, currency, transactionRef)
}

// RollbackTransaction mocks base method.
func (m *MockDatabase) RollbackTransaction(callerId int, playerName, transactionRef string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackTransaction", callerId, playerName, transactionRef)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackTransaction indicates an expected call of RollbackTransaction.
func (mr *MockDatabaseMockRecorder) RollbackTransaction(callerId, playerName, transactionRef interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackTransaction", reflect.TypeOf((*MockDatabase)(nil).RollbackTransaction), callerId, playerName, transactionRef)
}
